name: Pack "PACK" Folder

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (e.g., v0.1.0)'
        required: true
        default: 'v0.1.0'
      release_name:
        description: 'Release display name (without suffix)'
        required: false
        default: 'Gloom Gear'
      version_type:
        description: 'Version type'
        type: choice
        required: true
        default: 'alpha'
        options:
        - alpha
        - beta
        - release
      release_body:
        description: 'Release description (supports Markdown)'
        required: false
        default: 'Automated package release'
        type: textarea

jobs:
  pack-folder:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0

    - name: Verify project structure
      run: |
        echo "=== Project Root Structure ==="
        ls -la
        echo ""
        echo "=== PACK Folder Contents ==="
        ls -la PACK/ || echo "PACK directory does not exist"

    - name: Create Release resource pack
      if: github.event_name == 'workflow_dispatch'
      run: |
        # 创建 Release 使用的文件 - 带版本信息
        cd PACK
        if [ "${{ github.event.inputs.version_type }}" = "release" ]; then
          zip -r "../Gloom-Gear-${{ github.event.inputs.release_tag }}.zip" ./*
        else
          zip -r "../Gloom-Gear-${{ github.event.inputs.release_tag }}-${{ github.event.inputs.version_type }}.zip" ./*
        fi
        cd ..
        echo "Release resource pack created with version info"

    - name: Create Git Tag (Manual trigger only)
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if [ "${{ github.event.inputs.version_type }}" = "release" ]; then
          TAG_NAME="${{ github.event.inputs.release_tag }}"
        else
          TAG_NAME="${{ github.event.inputs.release_tag }}-${{ github.event.inputs.version_type }}"
        fi
        
        git tag -a "$TAG_NAME" -m "Release $TAG_NAME - ${{ github.event.inputs.release_name }}"
        git push origin "$TAG_NAME"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Set release name
      if: github.event_name == 'workflow_dispatch'
      id: set-release-name
      run: |
        if [ "${{ github.event.inputs.version_type }}" = "release" ]; then
          echo "RELEASE_NAME=${{ github.event.inputs.release_name }} ${{ github.event.inputs.release_tag }}" >> $GITHUB_OUTPUT
        else
          echo "RELEASE_NAME=${{ github.event.inputs.release_name }} ${{ github.event.inputs.release_tag }}-${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Release (Manual trigger only)
      if: github.event_name == 'workflow_dispatch'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ fromJSON(format('"{0}"', github.event.inputs.version_type)) && (github.event.inputs.version_type == 'release' && github.event.inputs.release_tag || format('{0}-{1}', github.event.inputs.release_tag, github.event.inputs.version_type)) }}
        name: ${{ steps.set-release-name.outputs.RELEASE_NAME }}
        body: |
          # ${{ github.event.inputs.release_name }} ${{ github.event.inputs.release_tag }}${{ github.event.inputs.version_type != 'release' && format('-{0}', github.event.inputs.version_type) || '' }}
          
          ${{ github.event.inputs.release_body }}
          
          ## Package Details
          - **Version**: ${{ github.event.inputs.release_tag }}${{ github.event.inputs.version_type != 'release' && format('-{0}', github.event.inputs.version_type) || '' }}
          - **Version Type**: ${{ github.event.inputs.version_type }}
          - **Build Date**: ${{ fromJSON(format('"{0}"', toJSON(github.event.inputs))) && fromJSON('{}') || format('{0}', github.sha) }}
          - **Package**: ${{ github.event.inputs.version_type == 'release' && format('Gloom-Gear-{0}.zip', github.event.inputs.release_tag) || format('Gloom-Gear-{0}-{1}.zip', github.event.inputs.release_tag, github.event.inputs.version_type) }}
          - **File Structure**: Direct contents of PACK folder
          
          ## Installation
          Download and place the zip file directly in your Minecraft resource packs folder.
          
          ---
          *Automatically generated release*
        files: |
          ${{ github.event.inputs.version_type == 'release' && format('Gloom-Gear-{0}.zip', github.event.inputs.release_tag) || format('Gloom-Gear-{0}-{1}.zip', github.event.inputs.release_tag, github.event.inputs.version_type) }}
        draft: false
        prerelease: ${{ github.event.inputs.version_type != 'release' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Gloom Gear
        path: PACK/
        retention-days: 30
